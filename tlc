#!/usr/bin/env ruby
#
# A simple text colorizer.
# Provide a config file name (one must be used, but ~/.tlc will be used by
# default) and stream something to stdin
#
require 'enumerator'

DEBUG = false

 
def set_config(argv)
    argv[0] || "#{ENV['HOME']}/.tlc"
end

def dbg_puts(str)
  puts str if DEBUG
end

def read_config(filename, config)
  dbg_puts "reading config #{filename}"
    return unless filename
    config ||= {}
    config[:skip_patterns] ||= []
    current_pattern = nil
    File.open(filename, "r") do |fh|
      fh.each_line do |line|
          line.chomp!
          next if line =~ /^\s*#/
          next if line =~ /^\s+$/
          if line =~ /^SKIP\s+/
              skip_pattern = line.gsub(/^SKIP\s+\//, '')
              skip_pattern.gsub!(/\/$/, '')
              config[:skip_patterns].push skip_pattern
              puts "Skipping pattern #{skip_pattern}"
              next
          end
          if line =~ /^\s+/
              next unless current_pattern
              colors = line.gsub(/^\s+/, '')
              colors.gsub!(/\s+$/, '')
              colors.upcase!
              config[current_pattern] ||= ''
              config[current_pattern] += ",#{colors}"
              next
          end
          if line =~ /^\//
              current_pattern = line.gsub(/^\//, '')
              current_pattern.gsub!(/\/$/, '')
              next
          end

        # do stuff to server here
      end
    end
    config
end

config = {}
config_file = set_config(ARGV)
read_config(config_file, config)
patterns = config.keys

## Escape sequences for colors
## Misc

class ColorMatches
    ## Foreground colors
    COLOR = {
        'GREY' => "\033[1;30m",
        'GRAY' => "\033[1;30m",
        'BLACK' => "\033[30m",
        'RED' => "\033[31m",
        'GREEN' => "\033[32m",
        'BROWN' => "\033[33m",
        'YELLOW' => "\033[1;33m",
        'BLUE' => "\033[34m",
        'MAGENTA' => "\033[35m",
        'CYAN' => "\033[36m",
        'WHITE' => "\033[37m",
        'RESET' => "\033[0m",
        'BOLD' => "\033[1m",
        'BLINK' => "\033[5m",
    }
     

    def initialize()
        @color_spots = []
    end

    def sorted_by_start
      @color_spots.sort_by { |spot| spot[0] }
    end

    def self.rule_to_colors(rules)
        prefix_string = ''
        rules.split(',').each do |rule|
            next if rule.empty?
            prefix_string += COLOR[rule]
        end
        prefix_string 
    end

    def color_at(i)
      sorted_by_start.each do |cs|
        return ColorMatches.rule_to_colors(cs[2]) if cs[0] <= i && cs[1] >= i
      end
      return COLOR['RESET']
    end

    def push(a, b, color_name)
      dbg_puts "ColorMatches.push(#{a}, #{b}, #{color_name})"
      # erase_obscured(range[0], range[1])
      # truncate_obscured(range[0], range[1])
      @color_spots.push [a,b,color_name]
      dbg_puts "\t@color_spots now #{@color_spots.inspect}"
    end
end

class String
  def indices e
    start, result = -1, []
    result << start while start = (self.index e, start + 1)
    result
  end
end

$stdin.each_line do |line|
  line.chomp!
  cm = ColorMatches.new()
  any_changes = false
  color_changes = []
  skip = false
  config[:skip_patterns].each do |skip_pattern|
      skip = true if m = line.match(/#{skip_pattern}/)
  end
  next if skip
  patterns.each do |pattern|
      next if pattern == config[:skip_pattern]
      if m = line.match(/#{pattern}/)
=begin
          all_offsets = (0 ... m.length).map { |n| m.offset(n) }
          enf         = line.enum_for(:scan, /#{pattern}/).map { Regexp.last_match.begin(0) }
          sindices    = line.indices /#{pattern}/
          weird_crap  = line.to_enum(:scan,/#{pattern}/i).map { |m,| [$`.size, $`.size+m.length,m] }

          dbg_puts "enum_for returns: #{enf.inspect}"
          dbg_puts "string.indices returns: #{sindices.inspect}"
          dbg_puts "weird_crap returns: #{weird_crap.inspect}"
=end
          all_offsets = line.to_enum(:scan,/#{pattern}/i).map { |m,| [$`.size, $`.size+m.length,m] }

          all_offsets.each { |ao| cm.push(ao[0], ao[1]-1, config[pattern]) }

          dbg_puts "/#{pattern}/ ==> #{all_offsets.inspect}: #{m.inspect}"
          dbg_puts "m.length: #{m.length}"
          dbg_puts "cm sorted: #{cm.sorted_by_start.inspect}"

          any_changes = true
      end
  end

  colorized_line = ''
  i = 0
  last_colat = ''
  line.split('').each do |c|
    colat = cm.color_at(i)
    i += 1
    if colat != last_colat
        colorized_line += "#{colat}#{c}"
        last_colat = colat
    else
        colorized_line += "#{c}"
    end
  end

  puts "#{colorized_line}#{(any_changes ? ColorMatches::COLOR['RESET'] : '')}"
end

if DEBUG
  ColorMatches::COLOR.each do |key,val|
    print "#{val}#{key}#{ColorMatches::COLOR['RESET']} "
  end
end

puts ColorMatches::COLOR['RESET']
